//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var Bitmap = module.exports.Bitmap = function(args) {
  this.bmType = null;
  this.bmWidth = null;
  this.bmHeight = null;
  this.bmWidthBytes = null;
  this.bmPlanes = null;
  this.bmBitsPixel = null;
  this.bmBits = null;
  if (args) {
    if (args.bmType !== undefined) {
      this.bmType = args.bmType;
    }
    if (args.bmWidth !== undefined) {
      this.bmWidth = args.bmWidth;
    }
    if (args.bmHeight !== undefined) {
      this.bmHeight = args.bmHeight;
    }
    if (args.bmWidthBytes !== undefined) {
      this.bmWidthBytes = args.bmWidthBytes;
    }
    if (args.bmPlanes !== undefined) {
      this.bmPlanes = args.bmPlanes;
    }
    if (args.bmBitsPixel !== undefined) {
      this.bmBitsPixel = args.bmBitsPixel;
    }
    if (args.bmBits !== undefined) {
      this.bmBits = args.bmBits;
    }
  }
};
Bitmap.prototype = {};
Bitmap.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.bmType = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.bmWidth = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.bmHeight = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.bmWidthBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.bmPlanes = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.bmBitsPixel = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.bmBits = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readBool();
          this.bmBits.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Bitmap.prototype.write = function(output) {
  output.writeStructBegin('Bitmap');
  if (this.bmType) {
    output.writeFieldBegin('bmType', Thrift.Type.I64, 1);
    output.writeI64(this.bmType);
    output.writeFieldEnd();
  }
  if (this.bmWidth) {
    output.writeFieldBegin('bmWidth', Thrift.Type.I64, 2);
    output.writeI64(this.bmWidth);
    output.writeFieldEnd();
  }
  if (this.bmHeight) {
    output.writeFieldBegin('bmHeight', Thrift.Type.I64, 3);
    output.writeI64(this.bmHeight);
    output.writeFieldEnd();
  }
  if (this.bmWidthBytes) {
    output.writeFieldBegin('bmWidthBytes', Thrift.Type.I64, 4);
    output.writeI64(this.bmWidthBytes);
    output.writeFieldEnd();
  }
  if (this.bmPlanes) {
    output.writeFieldBegin('bmPlanes', Thrift.Type.I16, 5);
    output.writeI16(this.bmPlanes);
    output.writeFieldEnd();
  }
  if (this.bmBitsPixel) {
    output.writeFieldBegin('bmBitsPixel', Thrift.Type.I16, 6);
    output.writeI16(this.bmBitsPixel);
    output.writeFieldEnd();
  }
  if (this.bmBits) {
    output.writeFieldBegin('bmBits', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.BOOL, this.bmBits.length);
    for (var iter7 in this.bmBits)
    {
      if (this.bmBits.hasOwnProperty(iter7))
      {
        iter7 = this.bmBits[iter7];
        output.writeBool(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeyboardInput = module.exports.KeyboardInput = function(args) {
  this.text = null;
  if (args) {
    if (args.text !== undefined) {
      this.text = args.text;
    }
  }
};
KeyboardInput.prototype = {};
KeyboardInput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyboardInput.prototype.write = function(output) {
  output.writeStructBegin('KeyboardInput');
  if (this.text) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MouseInput = module.exports.MouseInput = function(args) {
  this.x = null;
  this.y = null;
  this.doubleClick = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
    if (args.doubleClick !== undefined) {
      this.doubleClick = args.doubleClick;
    }
  }
};
MouseInput.prototype = {};
MouseInput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.doubleClick = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MouseInput.prototype.write = function(output) {
  output.writeStructBegin('MouseInput');
  if (this.x) {
    output.writeFieldBegin('x', Thrift.Type.I32, 1);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y) {
    output.writeFieldBegin('y', Thrift.Type.I32, 2);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  if (this.doubleClick) {
    output.writeFieldBegin('doubleClick', Thrift.Type.BOOL, 3);
    output.writeBool(this.doubleClick);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserInput = module.exports.UserInput = function(args) {
  this.keyboardInput = null;
  this.mouseInput = null;
  if (args) {
    if (args.keyboardInput !== undefined) {
      this.keyboardInput = args.keyboardInput;
    }
    if (args.mouseInput !== undefined) {
      this.mouseInput = args.mouseInput;
    }
  }
};
UserInput.prototype = {};
UserInput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyboardInput = new ttypes.KeyboardInput();
        this.keyboardInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mouseInput = new ttypes.MouseInput();
        this.mouseInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInput.prototype.write = function(output) {
  output.writeStructBegin('UserInput');
  if (this.keyboardInput) {
    output.writeFieldBegin('keyboardInput', Thrift.Type.STRUCT, 1);
    this.keyboardInput.write(output);
    output.writeFieldEnd();
  }
  if (this.mouseInput) {
    output.writeFieldBegin('mouseInput', Thrift.Type.STRUCT, 2);
    this.mouseInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

