//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var Bitmap = module.exports.Bitmap = function(args) {
};
Bitmap.prototype = {};
Bitmap.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Bitmap.prototype.write = function(output) {
  output.writeStructBegin('Bitmap');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeyboardInput = module.exports.KeyboardInput = function(args) {
  this.text = null;
  if (args) {
    if (args.text !== undefined) {
      this.text = args.text;
    }
  }
};
KeyboardInput.prototype = {};
KeyboardInput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyboardInput.prototype.write = function(output) {
  output.writeStructBegin('KeyboardInput');
  if (this.text) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MouseInput = module.exports.MouseInput = function(args) {
  this.x = null;
  this.y = null;
  this.doubleClick = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
    if (args.doubleClick !== undefined) {
      this.doubleClick = args.doubleClick;
    }
  }
};
MouseInput.prototype = {};
MouseInput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.doubleClick = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MouseInput.prototype.write = function(output) {
  output.writeStructBegin('MouseInput');
  if (this.x) {
    output.writeFieldBegin('x', Thrift.Type.I32, 1);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y) {
    output.writeFieldBegin('y', Thrift.Type.I32, 2);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  if (this.doubleClick) {
    output.writeFieldBegin('doubleClick', Thrift.Type.BOOL, 3);
    output.writeBool(this.doubleClick);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserInput = module.exports.UserInput = function(args) {
  this.keyboardInput = null;
  this.mouseInput = null;
  if (args) {
    if (args.keyboardInput !== undefined) {
      this.keyboardInput = args.keyboardInput;
    }
    if (args.mouseInput !== undefined) {
      this.mouseInput = args.mouseInput;
    }
  }
};
UserInput.prototype = {};
UserInput.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyboardInput = new ttypes.KeyboardInput();
        this.keyboardInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mouseInput = new ttypes.MouseInput();
        this.mouseInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInput.prototype.write = function(output) {
  output.writeStructBegin('UserInput');
  if (this.keyboardInput) {
    output.writeFieldBegin('keyboardInput', Thrift.Type.STRUCT, 1);
    this.keyboardInput.write(output);
    output.writeFieldEnd();
  }
  if (this.mouseInput) {
    output.writeFieldBegin('mouseInput', Thrift.Type.STRUCT, 2);
    this.mouseInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

