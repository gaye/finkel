//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./finkel_types');
//HELPER FUNCTIONS AND STRUCTURES

var Finkel_Start_args = function(args) {
  this.username = null;
  this.password = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
Finkel_Start_args.prototype = {};
Finkel_Start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_Start_args.prototype.write = function(output) {
  output.writeStructBegin('Finkel_Start_args');
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Finkel_Start_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Finkel_Start_result.prototype = {};
Finkel_Start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_Start_result.prototype.write = function(output) {
  output.writeStructBegin('Finkel_Start_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Finkel_Stop_args = function(args) {
};
Finkel_Stop_args.prototype = {};
Finkel_Stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_Stop_args.prototype.write = function(output) {
  output.writeStructBegin('Finkel_Stop_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Finkel_Stop_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Finkel_Stop_result.prototype = {};
Finkel_Stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_Stop_result.prototype.write = function(output) {
  output.writeStructBegin('Finkel_Stop_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Finkel_TakeScreenshot_args = function(args) {
};
Finkel_TakeScreenshot_args.prototype = {};
Finkel_TakeScreenshot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_TakeScreenshot_args.prototype.write = function(output) {
  output.writeStructBegin('Finkel_TakeScreenshot_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Finkel_TakeScreenshot_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Finkel_TakeScreenshot_result.prototype = {};
Finkel_TakeScreenshot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          var _size7 = 0;
          var _rtmp311;
          elem6 = [];
          var _etype10 = 0;
          _rtmp311 = input.readListBegin();
          _etype10 = _rtmp311.etype;
          _size7 = _rtmp311.size;
          for (var _i12 = 0; _i12 < _size7; ++_i12)
          {
            var elem13 = null;
            elem13 = input.readByte();
            elem6.push(elem13);
          }
          input.readListEnd();
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_TakeScreenshot_result.prototype.write = function(output) {
  output.writeStructBegin('Finkel_TakeScreenshot_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter14 in this.success)
    {
      if (this.success.hasOwnProperty(iter14))
      {
        iter14 = this.success[iter14];
        output.writeListBegin(Thrift.Type.BYTE, iter14.length);
        for (var iter15 in iter14)
        {
          if (iter14.hasOwnProperty(iter15))
          {
            iter15 = iter14[iter15];
            output.writeByte(iter15);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Finkel_ProcessUserInput_args = function(args) {
  this.inputSequence = null;
  if (args) {
    if (args.inputSequence !== undefined) {
      this.inputSequence = args.inputSequence;
    }
  }
};
Finkel_ProcessUserInput_args.prototype = {};
Finkel_ProcessUserInput_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.inputSequence = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.UserInput();
          elem22.read(input);
          this.inputSequence.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_ProcessUserInput_args.prototype.write = function(output) {
  output.writeStructBegin('Finkel_ProcessUserInput_args');
  if (this.inputSequence) {
    output.writeFieldBegin('inputSequence', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.inputSequence.length);
    for (var iter23 in this.inputSequence)
    {
      if (this.inputSequence.hasOwnProperty(iter23))
      {
        iter23 = this.inputSequence[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Finkel_ProcessUserInput_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Finkel_ProcessUserInput_result.prototype = {};
Finkel_ProcessUserInput_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_ProcessUserInput_result.prototype.write = function(output) {
  output.writeStructBegin('Finkel_ProcessUserInput_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FinkelClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
FinkelClient.prototype = {};
FinkelClient.prototype.Start = function(username, password, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_Start(username, password);
};

FinkelClient.prototype.send_Start = function(username, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Start', Thrift.MessageType.CALL, this.seqid);
  var args = new Finkel_Start_args();
  args.username = username;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FinkelClient.prototype.recv_Start = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Finkel_Start_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Start failed: unknown result');
};
FinkelClient.prototype.Stop = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_Stop();
};

FinkelClient.prototype.send_Stop = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Stop', Thrift.MessageType.CALL, this.seqid);
  var args = new Finkel_Stop_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FinkelClient.prototype.recv_Stop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Finkel_Stop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('Stop failed: unknown result');
};
FinkelClient.prototype.TakeScreenshot = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_TakeScreenshot();
};

FinkelClient.prototype.send_TakeScreenshot = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('TakeScreenshot', Thrift.MessageType.CALL, this.seqid);
  var args = new Finkel_TakeScreenshot_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FinkelClient.prototype.recv_TakeScreenshot = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Finkel_TakeScreenshot_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('TakeScreenshot failed: unknown result');
};
FinkelClient.prototype.ProcessUserInput = function(inputSequence, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_ProcessUserInput(inputSequence);
};

FinkelClient.prototype.send_ProcessUserInput = function(inputSequence) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ProcessUserInput', Thrift.MessageType.CALL, this.seqid);
  var args = new Finkel_ProcessUserInput_args();
  args.inputSequence = inputSequence;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FinkelClient.prototype.recv_ProcessUserInput = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Finkel_ProcessUserInput_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ProcessUserInput failed: unknown result');
};
var FinkelProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
FinkelProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

FinkelProcessor.prototype.process_Start = function(seqid, input, output) {
  var args = new Finkel_Start_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Finkel_Start_result();
  this._handler.Start(args.username, args.password, function (success) {
    result.success = success;
    output.writeMessageBegin("Start", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FinkelProcessor.prototype.process_Stop = function(seqid, input, output) {
  var args = new Finkel_Stop_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Finkel_Stop_result();
  this._handler.Stop(function (success) {
    result.success = success;
    output.writeMessageBegin("Stop", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FinkelProcessor.prototype.process_TakeScreenshot = function(seqid, input, output) {
  var args = new Finkel_TakeScreenshot_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Finkel_TakeScreenshot_result();
  this._handler.TakeScreenshot(function (success) {
    result.success = success;
    output.writeMessageBegin("TakeScreenshot", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FinkelProcessor.prototype.process_ProcessUserInput = function(seqid, input, output) {
  var args = new Finkel_ProcessUserInput_args();
  args.read(input);
  input.readMessageEnd();
  var result = new Finkel_ProcessUserInput_result();
  this._handler.ProcessUserInput(args.inputSequence, function (success) {
    result.success = success;
    output.writeMessageBegin("ProcessUserInput", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

