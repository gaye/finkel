//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Finkel_start_args = function(args) {
  this.username = null;
  this.password = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
Finkel_start_args.prototype = {};
Finkel_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_start_args.prototype.write = function(output) {
  output.writeStructBegin('Finkel_start_args');
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Finkel_start_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Finkel_start_result.prototype = {};
Finkel_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_start_result.prototype.write = function(output) {
  output.writeStructBegin('Finkel_start_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Finkel_stop_args = function(args) {
};
Finkel_stop_args.prototype = {};
Finkel_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_stop_args.prototype.write = function(output) {
  output.writeStructBegin('Finkel_stop_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Finkel_stop_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Finkel_stop_result.prototype = {};
Finkel_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_stop_result.prototype.write = function(output) {
  output.writeStructBegin('Finkel_stop_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Finkel_TakeScreenshot_args = function(args) {
};
Finkel_TakeScreenshot_args.prototype = {};
Finkel_TakeScreenshot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_TakeScreenshot_args.prototype.write = function(output) {
  output.writeStructBegin('Finkel_TakeScreenshot_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Finkel_TakeScreenshot_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Finkel_TakeScreenshot_result.prototype = {};
Finkel_TakeScreenshot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Bitmap();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_TakeScreenshot_result.prototype.write = function(output) {
  output.writeStructBegin('Finkel_TakeScreenshot_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Finkel_ProcessUserInput_args = function(args) {
  this.inputSequence = null;
  if (args) {
    if (args.inputSequence !== undefined) {
      this.inputSequence = args.inputSequence;
    }
  }
};
Finkel_ProcessUserInput_args.prototype = {};
Finkel_ProcessUserInput_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.inputSequence = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new UserInput();
          elem6.read(input);
          this.inputSequence.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_ProcessUserInput_args.prototype.write = function(output) {
  output.writeStructBegin('Finkel_ProcessUserInput_args');
  if (this.inputSequence) {
    output.writeFieldBegin('inputSequence', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.inputSequence.length);
    for (var iter7 in this.inputSequence)
    {
      if (this.inputSequence.hasOwnProperty(iter7))
      {
        iter7 = this.inputSequence[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Finkel_ProcessUserInput_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Finkel_ProcessUserInput_result.prototype = {};
Finkel_ProcessUserInput_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Finkel_ProcessUserInput_result.prototype.write = function(output) {
  output.writeStructBegin('Finkel_ProcessUserInput_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FinkelClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
FinkelClient.prototype = {};
FinkelClient.prototype.start = function(username, password) {
  this.send_start(username, password);
  return this.recv_start();
};

FinkelClient.prototype.send_start = function(username, password) {
  this.output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid);
  var args = new Finkel_start_args();
  args.username = username;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

FinkelClient.prototype.recv_start = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Finkel_start_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'start failed: unknown result';
};
FinkelClient.prototype.stop = function() {
  this.send_stop();
  return this.recv_stop();
};

FinkelClient.prototype.send_stop = function() {
  this.output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid);
  var args = new Finkel_stop_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

FinkelClient.prototype.recv_stop = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Finkel_stop_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'stop failed: unknown result';
};
FinkelClient.prototype.TakeScreenshot = function() {
  this.send_TakeScreenshot();
  return this.recv_TakeScreenshot();
};

FinkelClient.prototype.send_TakeScreenshot = function() {
  this.output.writeMessageBegin('TakeScreenshot', Thrift.MessageType.CALL, this.seqid);
  var args = new Finkel_TakeScreenshot_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

FinkelClient.prototype.recv_TakeScreenshot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Finkel_TakeScreenshot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'TakeScreenshot failed: unknown result';
};
FinkelClient.prototype.ProcessUserInput = function(inputSequence) {
  this.send_ProcessUserInput(inputSequence);
  return this.recv_ProcessUserInput();
};

FinkelClient.prototype.send_ProcessUserInput = function(inputSequence) {
  this.output.writeMessageBegin('ProcessUserInput', Thrift.MessageType.CALL, this.seqid);
  var args = new Finkel_ProcessUserInput_args();
  args.inputSequence = inputSequence;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

FinkelClient.prototype.recv_ProcessUserInput = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Finkel_ProcessUserInput_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'ProcessUserInput failed: unknown result';
};
