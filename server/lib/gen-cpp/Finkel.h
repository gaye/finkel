/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Finkel_H
#define Finkel_H

#include <TProcessor.h>
#include "finkel_types.h"



class FinkelIf {
 public:
  virtual ~FinkelIf() {}
  virtual bool start(const std::string& username, const std::string& password) = 0;
  virtual bool stop() = 0;
  virtual void TakeScreenshot(Bitmap& _return) = 0;
  virtual bool ProcessUserInput(const std::vector<UserInput> & inputSequence) = 0;
};

class FinkelNull : virtual public FinkelIf {
 public:
  virtual ~FinkelNull() {}
  bool start(const std::string& /* username */, const std::string& /* password */) {
    bool _return = false;
    return _return;
  }
  bool stop() {
    bool _return = false;
    return _return;
  }
  void TakeScreenshot(Bitmap& /* _return */) {
    return;
  }
  bool ProcessUserInput(const std::vector<UserInput> & /* inputSequence */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Finkel_start_args__isset {
  _Finkel_start_args__isset() : username(false), password(false) {}
  bool username;
  bool password;
} _Finkel_start_args__isset;

class Finkel_start_args {
 public:

  Finkel_start_args() : username(""), password("") {
  }

  virtual ~Finkel_start_args() throw() {}

  std::string username;
  std::string password;

  _Finkel_start_args__isset __isset;

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const Finkel_start_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const Finkel_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Finkel_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Finkel_start_pargs {
 public:


  virtual ~Finkel_start_pargs() throw() {}

  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Finkel_start_result__isset {
  _Finkel_start_result__isset() : success(false) {}
  bool success;
} _Finkel_start_result__isset;

class Finkel_start_result {
 public:

  Finkel_start_result() : success(0) {
  }

  virtual ~Finkel_start_result() throw() {}

  bool success;

  _Finkel_start_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Finkel_start_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Finkel_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Finkel_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Finkel_start_presult__isset {
  _Finkel_start_presult__isset() : success(false) {}
  bool success;
} _Finkel_start_presult__isset;

class Finkel_start_presult {
 public:


  virtual ~Finkel_start_presult() throw() {}

  bool* success;

  _Finkel_start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Finkel_stop_args {
 public:

  Finkel_stop_args() {
  }

  virtual ~Finkel_stop_args() throw() {}


  bool operator == (const Finkel_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Finkel_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Finkel_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Finkel_stop_pargs {
 public:


  virtual ~Finkel_stop_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Finkel_stop_result__isset {
  _Finkel_stop_result__isset() : success(false) {}
  bool success;
} _Finkel_stop_result__isset;

class Finkel_stop_result {
 public:

  Finkel_stop_result() : success(0) {
  }

  virtual ~Finkel_stop_result() throw() {}

  bool success;

  _Finkel_stop_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Finkel_stop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Finkel_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Finkel_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Finkel_stop_presult__isset {
  _Finkel_stop_presult__isset() : success(false) {}
  bool success;
} _Finkel_stop_presult__isset;

class Finkel_stop_presult {
 public:


  virtual ~Finkel_stop_presult() throw() {}

  bool* success;

  _Finkel_stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Finkel_TakeScreenshot_args {
 public:

  Finkel_TakeScreenshot_args() {
  }

  virtual ~Finkel_TakeScreenshot_args() throw() {}


  bool operator == (const Finkel_TakeScreenshot_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Finkel_TakeScreenshot_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Finkel_TakeScreenshot_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Finkel_TakeScreenshot_pargs {
 public:


  virtual ~Finkel_TakeScreenshot_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Finkel_TakeScreenshot_result__isset {
  _Finkel_TakeScreenshot_result__isset() : success(false) {}
  bool success;
} _Finkel_TakeScreenshot_result__isset;

class Finkel_TakeScreenshot_result {
 public:

  Finkel_TakeScreenshot_result() {
  }

  virtual ~Finkel_TakeScreenshot_result() throw() {}

  Bitmap success;

  _Finkel_TakeScreenshot_result__isset __isset;

  void __set_success(const Bitmap& val) {
    success = val;
  }

  bool operator == (const Finkel_TakeScreenshot_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Finkel_TakeScreenshot_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Finkel_TakeScreenshot_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Finkel_TakeScreenshot_presult__isset {
  _Finkel_TakeScreenshot_presult__isset() : success(false) {}
  bool success;
} _Finkel_TakeScreenshot_presult__isset;

class Finkel_TakeScreenshot_presult {
 public:


  virtual ~Finkel_TakeScreenshot_presult() throw() {}

  Bitmap* success;

  _Finkel_TakeScreenshot_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Finkel_ProcessUserInput_args__isset {
  _Finkel_ProcessUserInput_args__isset() : inputSequence(false) {}
  bool inputSequence;
} _Finkel_ProcessUserInput_args__isset;

class Finkel_ProcessUserInput_args {
 public:

  Finkel_ProcessUserInput_args() {
  }

  virtual ~Finkel_ProcessUserInput_args() throw() {}

  std::vector<UserInput>  inputSequence;

  _Finkel_ProcessUserInput_args__isset __isset;

  void __set_inputSequence(const std::vector<UserInput> & val) {
    inputSequence = val;
  }

  bool operator == (const Finkel_ProcessUserInput_args & rhs) const
  {
    if (!(inputSequence == rhs.inputSequence))
      return false;
    return true;
  }
  bool operator != (const Finkel_ProcessUserInput_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Finkel_ProcessUserInput_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Finkel_ProcessUserInput_pargs {
 public:


  virtual ~Finkel_ProcessUserInput_pargs() throw() {}

  const std::vector<UserInput> * inputSequence;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Finkel_ProcessUserInput_result__isset {
  _Finkel_ProcessUserInput_result__isset() : success(false) {}
  bool success;
} _Finkel_ProcessUserInput_result__isset;

class Finkel_ProcessUserInput_result {
 public:

  Finkel_ProcessUserInput_result() : success(0) {
  }

  virtual ~Finkel_ProcessUserInput_result() throw() {}

  bool success;

  _Finkel_ProcessUserInput_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const Finkel_ProcessUserInput_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Finkel_ProcessUserInput_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Finkel_ProcessUserInput_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Finkel_ProcessUserInput_presult__isset {
  _Finkel_ProcessUserInput_presult__isset() : success(false) {}
  bool success;
} _Finkel_ProcessUserInput_presult__isset;

class Finkel_ProcessUserInput_presult {
 public:


  virtual ~Finkel_ProcessUserInput_presult() throw() {}

  bool* success;

  _Finkel_ProcessUserInput_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FinkelClient : virtual public FinkelIf {
 public:
  FinkelClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  FinkelClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool start(const std::string& username, const std::string& password);
  void send_start(const std::string& username, const std::string& password);
  bool recv_start();
  bool stop();
  void send_stop();
  bool recv_stop();
  void TakeScreenshot(Bitmap& _return);
  void send_TakeScreenshot();
  void recv_TakeScreenshot(Bitmap& _return);
  bool ProcessUserInput(const std::vector<UserInput> & inputSequence);
  void send_ProcessUserInput(const std::vector<UserInput> & inputSequence);
  bool recv_ProcessUserInput();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FinkelProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<FinkelIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (FinkelProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TakeScreenshot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ProcessUserInput(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FinkelProcessor(boost::shared_ptr<FinkelIf> iface) :
    iface_(iface) {
    processMap_["start"] = &FinkelProcessor::process_start;
    processMap_["stop"] = &FinkelProcessor::process_stop;
    processMap_["TakeScreenshot"] = &FinkelProcessor::process_TakeScreenshot;
    processMap_["ProcessUserInput"] = &FinkelProcessor::process_ProcessUserInput;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~FinkelProcessor() {}
};

class FinkelMultiface : virtual public FinkelIf {
 public:
  FinkelMultiface(std::vector<boost::shared_ptr<FinkelIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FinkelMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FinkelIf> > ifaces_;
  FinkelMultiface() {}
  void add(boost::shared_ptr<FinkelIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool start(const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->start(username, password);
      } else {
        ifaces_[i]->start(username, password);
      }
    }
  }

  bool stop() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->stop();
      } else {
        ifaces_[i]->stop();
      }
    }
  }

  void TakeScreenshot(Bitmap& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->TakeScreenshot(_return);
        return;
      } else {
        ifaces_[i]->TakeScreenshot(_return);
      }
    }
  }

  bool ProcessUserInput(const std::vector<UserInput> & inputSequence) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->ProcessUserInput(inputSequence);
      } else {
        ifaces_[i]->ProcessUserInput(inputSequence);
      }
    }
  }

};



#endif
