/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef finkel_TYPES_H
#define finkel_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _Bitmap__isset {
  _Bitmap__isset() : bmType(false), bmWidth(false), bmHeight(false), bmWidthBytes(false), bmPlanes(false), bmBitsPixel(false), bmBits(false) {}
  bool bmType;
  bool bmWidth;
  bool bmHeight;
  bool bmWidthBytes;
  bool bmPlanes;
  bool bmBitsPixel;
  bool bmBits;
} _Bitmap__isset;

class Bitmap {
 public:

  static const char* ascii_fingerprint; // = "E310CE032BA4BC66095A6E83A5544AA4";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x10,0xCE,0x03,0x2B,0xA4,0xBC,0x66,0x09,0x5A,0x6E,0x83,0xA5,0x54,0x4A,0xA4};

  Bitmap() : bmType(0), bmWidth(0), bmHeight(0), bmWidthBytes(0), bmPlanes(0), bmBitsPixel(0) {
  }

  virtual ~Bitmap() throw() {}

  int64_t bmType;
  int64_t bmWidth;
  int64_t bmHeight;
  int64_t bmWidthBytes;
  int16_t bmPlanes;
  int16_t bmBitsPixel;
  std::vector<int8_t>  bmBits;

  _Bitmap__isset __isset;

  void __set_bmType(const int64_t val) {
    bmType = val;
  }

  void __set_bmWidth(const int64_t val) {
    bmWidth = val;
  }

  void __set_bmHeight(const int64_t val) {
    bmHeight = val;
  }

  void __set_bmWidthBytes(const int64_t val) {
    bmWidthBytes = val;
  }

  void __set_bmPlanes(const int16_t val) {
    bmPlanes = val;
  }

  void __set_bmBitsPixel(const int16_t val) {
    bmBitsPixel = val;
  }

  void __set_bmBits(const std::vector<int8_t> & val) {
    bmBits = val;
  }

  bool operator == (const Bitmap & rhs) const
  {
    if (!(bmType == rhs.bmType))
      return false;
    if (!(bmWidth == rhs.bmWidth))
      return false;
    if (!(bmHeight == rhs.bmHeight))
      return false;
    if (!(bmWidthBytes == rhs.bmWidthBytes))
      return false;
    if (!(bmPlanes == rhs.bmPlanes))
      return false;
    if (!(bmBitsPixel == rhs.bmBitsPixel))
      return false;
    if (!(bmBits == rhs.bmBits))
      return false;
    return true;
  }
  bool operator != (const Bitmap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bitmap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KeyboardInput__isset {
  _KeyboardInput__isset() : text(false) {}
  bool text;
} _KeyboardInput__isset;

class KeyboardInput {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  KeyboardInput() : text("") {
  }

  virtual ~KeyboardInput() throw() {}

  std::string text;

  _KeyboardInput__isset __isset;

  void __set_text(const std::string& val) {
    text = val;
  }

  bool operator == (const KeyboardInput & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const KeyboardInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyboardInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MouseInput__isset {
  _MouseInput__isset() : x(false), y(false), doubleClick(false) {}
  bool x;
  bool y;
  bool doubleClick;
} _MouseInput__isset;

class MouseInput {
 public:

  static const char* ascii_fingerprint; // = "E0991C843E3F9D01A30FF59D9FBC2CAF";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0x99,0x1C,0x84,0x3E,0x3F,0x9D,0x01,0xA3,0x0F,0xF5,0x9D,0x9F,0xBC,0x2C,0xAF};

  MouseInput() : x(0), y(0), doubleClick(0) {
  }

  virtual ~MouseInput() throw() {}

  int32_t x;
  int32_t y;
  bool doubleClick;

  _MouseInput__isset __isset;

  void __set_x(const int32_t val) {
    x = val;
  }

  void __set_y(const int32_t val) {
    y = val;
  }

  void __set_doubleClick(const bool val) {
    doubleClick = val;
  }

  bool operator == (const MouseInput & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(doubleClick == rhs.doubleClick))
      return false;
    return true;
  }
  bool operator != (const MouseInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MouseInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserInput__isset {
  _UserInput__isset() : keyboardInput(false), mouseInput(false) {}
  bool keyboardInput;
  bool mouseInput;
} _UserInput__isset;

class UserInput {
 public:

  static const char* ascii_fingerprint; // = "EA7B0BE456E446118AF5D50F744C8B81";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x7B,0x0B,0xE4,0x56,0xE4,0x46,0x11,0x8A,0xF5,0xD5,0x0F,0x74,0x4C,0x8B,0x81};

  UserInput() {
  }

  virtual ~UserInput() throw() {}

  KeyboardInput keyboardInput;
  MouseInput mouseInput;

  _UserInput__isset __isset;

  void __set_keyboardInput(const KeyboardInput& val) {
    keyboardInput = val;
  }

  void __set_mouseInput(const MouseInput& val) {
    mouseInput = val;
  }

  bool operator == (const UserInput & rhs) const
  {
    if (!(keyboardInput == rhs.keyboardInput))
      return false;
    if (!(mouseInput == rhs.mouseInput))
      return false;
    return true;
  }
  bool operator != (const UserInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
