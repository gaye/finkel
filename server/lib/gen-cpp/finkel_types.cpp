/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "finkel_types.h"



const char* Bitmap::ascii_fingerprint = "0FB6713F450FDA917844421D68174C38";
const uint8_t Bitmap::binary_fingerprint[16] = {0x0F,0xB6,0x71,0x3F,0x45,0x0F,0xDA,0x91,0x78,0x44,0x42,0x1D,0x68,0x17,0x4C,0x38};

uint32_t Bitmap::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bmType);
          this->__isset.bmType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bmWidth);
          this->__isset.bmWidth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bmHeight);
          this->__isset.bmHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bmWidthBytes);
          this->__isset.bmWidthBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->bmPlanes);
          this->__isset.bmPlanes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->bmBitsPixel);
          this->__isset.bmBitsPixel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->bmBits.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->bmBits.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readBool(this->bmBits[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.bmBits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bitmap::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bitmap");
  xfer += oprot->writeFieldBegin("bmType", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bmType);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bmWidth", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bmWidth);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bmHeight", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->bmHeight);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bmWidthBytes", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->bmWidthBytes);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bmPlanes", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->bmPlanes);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bmBitsPixel", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->bmBitsPixel);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bmBits", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->bmBits.size()));
    std::vector<bool> ::const_iterator _iter5;
    for (_iter5 = this->bmBits.begin(); _iter5 != this->bmBits.end(); ++_iter5)
    {
      xfer += oprot->writeBool((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* KeyboardInput::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t KeyboardInput::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t KeyboardInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t KeyboardInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KeyboardInput");
  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MouseInput::ascii_fingerprint = "E0991C843E3F9D01A30FF59D9FBC2CAF";
const uint8_t MouseInput::binary_fingerprint[16] = {0xE0,0x99,0x1C,0x84,0x3E,0x3F,0x9D,0x01,0xA3,0x0F,0xF5,0x9D,0x9F,0xBC,0x2C,0xAF};

uint32_t MouseInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->doubleClick);
          this->__isset.doubleClick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MouseInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MouseInput");
  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->x);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->y);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("doubleClick", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->doubleClick);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* UserInput::ascii_fingerprint = "EA7B0BE456E446118AF5D50F744C8B81";
const uint8_t UserInput::binary_fingerprint[16] = {0xEA,0x7B,0x0B,0xE4,0x56,0xE4,0x46,0x11,0x8A,0xF5,0xD5,0x0F,0x74,0x4C,0x8B,0x81};

uint32_t UserInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->keyboardInput.read(iprot);
          this->__isset.keyboardInput = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mouseInput.read(iprot);
          this->__isset.mouseInput = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserInput");
  xfer += oprot->writeFieldBegin("keyboardInput", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->keyboardInput.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mouseInput", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->mouseInput.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


