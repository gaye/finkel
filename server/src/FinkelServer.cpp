// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Finkel.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <tchar.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <ThriftWin32.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

#define MTGO "C:\\Program Files (x86)\\Wizards of the Coast\\Magic Online\\Kicker.exe"
#define MTGO_PATH "C:\\Program Files (x86)\\Wizards of the Coast\\Magic Online"


class FinkelHandler : virtual public FinkelIf {
public:
  bool running;

  FinkelHandler() {
    this->running = false;
  }

  bool start(const std::string& username, const std::string& password) {
    if (this->running) {
      return false;
    }

    // Shell out to MTGO
    LPTSTR program = _tcsdup(TEXT(MTGO));
    LPTSTR path = _tcsdup(TEXT(MTGO_PATH));
    PROCESS_INFORMATION procInfo;
    STARTUPINFO startupInfo;
    ZeroMemory(&startupInfo,sizeof(STARTUPINFO));
    startupInfo.cb = sizeof(STARTUPINFO);
    startupInfo.dwFlags = STARTF_USESTDHANDLES;

    bool created = CreateProcess(
      program /** lpApplicationName */,
      NULL /** lpCommandLine */,
      NULL /** lpProcessAttributes */,
      NULL /** lpThreadAttributes */,
      false /** bInheritHandles */,
      CREATE_NEW_CONSOLE /** dwCreationFlags */,
      NULL /** lpEnvironment */,
      path /** lpCurrentDirectory */,
      &startupInfo,
      &procInfo
    );

    if (!created) {
      LPVOID msg;
      DWORD lastError = GetLastError();
      FormatMessage(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
          FORMAT_MESSAGE_FROM_SYSTEM |
          FORMAT_MESSAGE_IGNORE_INSERTS,
        NULL,
        lastError,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        (LPTSTR) &msg,
        0,
        NULL
      );

      OutputDebugString((LPTSTR) msg);
      return false;
    }

    // If there is an update available, get it.
    // TODO(gareth)

    // Launch MTGO.

    // Sign in with the username and password.

    this->running = true;
    return true;
  }

  bool stop() {
    if (!this->running) {
      return false;
    }

    // Kill Magic Online

    this->running = false;
    return true;
  }

  void TakeScreenshot(Bitmap& _return) {
    // TODO(gareth): Implement this.
  }

  bool ProcessUserInput(const std::vector<UserInput> & inputSequence) {
    // TODO(gareth): Implement this.
    return false;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<FinkelHandler> handler(new FinkelHandler());
  shared_ptr<TProcessor> processor(new FinkelProcessor(handler));
  shared_ptr<TTransportFactory> transportFactory(
    new TBufferedTransportFactory()
  );
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  ThriftWin32EventManager eventMgr;
  shared_ptr<TNonblockingServer> server =
    eventMgr.createNonblockingServer(processor, protocolFactory, port);
  server->serve();

  return 0;
}
